"""
Cryptographic signing and verification
"""

from collections import namedtuple
from hashlib import sha256, pbkdf2_hmac as hmac

from blockchain.fields import FieldElement
from blockchain.elliptic import EllipticCurvePoint
from blockchain.etc import hash160, encode_base58_checksum


"""
An elliptic curve for public key cryptography is defined with the following parameters:
- a and b for the curve y^2 = x^3 + a*x + b.
- prime of the finite field, p.
- x and y coordinates of the generator point G.
- the order of the group generated by G, n.
"""

ECparams = namedtuple(typename='ECparams', field_names='a b p gx gy n')

secp256k1_params = ECparams(a=0, b=7, p=2**256 - 2**32 - 977,
                            gx=0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798,
                            gy=0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8,
                            n=0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141)


class S256Field(FieldElement):
    def __init__(self, num, prime=None):
        super().__init__(num, prime=secp256k1_params.p)

    def __repr__(self):
        return '{:x}'.format(self.num).zfill(64)

    def sqrt(self):
        return self ** ((secp256k1_params.p + 1) // 4)


class S256Point(EllipticCurvePoint):
    """
    Point on the secp256k1 elliptic curve
    """

    def __init__(self, x, y, a=None, b=None):
        a, b = S256Field(secp256k1_params.a), S256Field(secp256k1_params.b)

        if type(x) == int:
            super().__init__(S256Field(x), S256Field(y), a=a, b=b)
        else:
            # In case we initialize with the point at infinity
            super().__init__(x, y, a, b)

    def __rmul__(self, coefficient):
        coeff = coefficient % secp256k1_params.n
        return super().__rmul__(coeff)

    @classmethod
    def parse(cls, sec_bin):
        """
        Creates a point from pub key SEC binary

        Parameters
        ----------
        sec_bin: bytes
            Serialized point

        Returns
        -------
        :obj:`S256Point`
        """

        # uncompressed
        if sec_bin[0] == 4:
            x = int.from_bytes(sec_bin[1:33], 'big')
            y = int.from_bytes(sec_bin[33:65], 'big')
            return S256Point(x=x, y=y)

        # compressed
        is_even = sec_bin[0] == 2
        x = S256Field(int.to_bytes(sec_bin[1:], 'big'))
        alpha = x**3 + S256Field(secp256k1_params.b)
        beta = alpha.sqrt()

        if beta.num % 2 == 0:
            even_beta = beta
            odd_beta = S256Field(secp256k1_params.p - beta.num)
        else:
            even_beta = S256Field(secp256k1_params.p - beta.num)
            odd_beta = beta

        if is_even:
            return S256Point(x, even_beta)
        else:
            return S256Point(x, odd_beta)

    def verify(self, z, sig):
        """
        Verify a secp256k1 signature

        Given a public key that is a point on the secp256k1 curve and a signature hash, z,
        we can verify whether a signature is valid or not.

        Parameters
        ----------
        z: int
            Signature hash
        sig: :obj:`Signature`
            Signature

        Returns
        -------
        bool
            True if the signature for the given public key and signature hash is valid.
        """
        # use Fermat's little theorem to get the inverse
        s_inv = pow(sig.s, secp256k1_params.n - 2, secp256k1_params.n)
        u = z * s_inv * secp256k1_params.n
        v = sig.r * s_inv % secp256k1_params.n
        total = u * G_S256 + v * self

        return total.x.num == sig.r

    def sec(self, compressed=True):
        """
        Serialize the point in SEC format

        Uncompressed SEC format is:
        - 04 - Marker
        - x coordinate - 32 bytes, big endian
        - y coordinate - 32 bytes, big endian

        Parameters
        ----------
        compressed: bool
            Specify compressed or uncompressed.

        Returns
        -------
        bytes
        """
        if compressed:
            prefix = b'\x02' if self.y.num % 2 == 0 else b'\x03'
            return prefix + self.x.num.to_bytes(32, 'big')
        else:
            return b'\x04' + self.x.num.to_bytes(32, 'big') + self.y.num.to_bytes(32, 'big')

    def hash160(self, compressed=True):
        return hash160(self.sec(compressed))

    def address(self, compressed=True, testnet=False) -> str:
        if testnet:
            prefix = b'\x6f'
        else:
            prefix = b'\x00'
        h160 = self.hash160(compressed)
        return encode_base58_checksum(prefix + h160)


G_S256 = S256Point(secp256k1_params.gx, secp256k1_params.gy)


class Signature:
    def __init__(self, r, s):
        self.r = r
        self.s = s

    def __repr__(self):
        return f'Signature({self.r:x}, {self.s:x})'

    @classmethod
    def parse(cls, der_signature):
        """
        DER format:
            - Marker (0x30)
            - Length of sig (0x44 or 0x45)
            - Marker for r value (0x02)
            - r value length (0x20 or 0x21)
            - r value (big-endian)
            - Marker for s value (0x02)
            - s value length (0x20 or 0x21)
            - s value (big-endian)
        """
        if der_signature[0] != 0x30:
            raise ValueError

        r_length = der_signature[3]
        r_bytes = der_signature[4:r_length + 4].lstrip(b'\x00')
        r_value = int.from_bytes(r_bytes, 'big')

        s_marker = r_length + 4
        s_length = der_signature[s_marker + 1]
        s_bytes = der_signature[s_marker + 2:s_marker + 2 + s_length].lstrip(b'\x00')
        s_value = int.from_bytes(s_bytes, 'big')

        return cls(r_value, s_value)

    def der(self):
        """ Distinguished Encoding Rules """
        rbin = self.r.to_bytes(32, byteorder='big')

        # strip off leading null bytes
        rbin = rbin.lstrip(b'\x00')

        # prepend 0x00 if rbin has a high bit
        if rbin[0] & 0x80:
            rbin = b'\x00' + rbin

        result = bytes([2, len(rbin)]) + rbin

        sbin = self.s.to_bytes(32, byteorder='big')

        # strip off leading null bytes
        sbin = sbin.lstrip(b'\x00')

        # prepend 0x00 if sbin has a high bit
        if sbin[0] & 0x80:
            sbin = b'\x00' + sbin

        result += bytes([2, len(sbin)]) + sbin

        return bytes([0x30, len(result)]) + result


class PrivateKeyS256:
    def __init__(self, secret):
        self.secret = secret
        self.point = secret * G_S256

    def hex(self):
        return f'{self.secret:x}'.zfill(64)

    def deterministic_k(self, z):
        """
        Given z and a secret generates a unique, deterministic k every time.
        See RFC 6979 (https://tools.ietf.org/html/rfc6979)
        """
        N = secp256k1_params.n

        k = b'\x00' * 32
        v = b'\x01' * 32

        if z > N:
            z -= N

        z_bytes = z.to_bytes(32, 'big')
        secret_bytes = self.secret.to_bytes(32, 'big')
        k = hmac.new(k, v + b'\x00' + secret_bytes + z_bytes, sha256).digest()
        v = hmac.new(k, v, sha256).digest()
        k = hmac.new(k, v + b'\x01' + secret_bytes + z_bytes, sha256).digest()
        v = hmac.new(k, v, sha256).digest()

        while True:
            v = hmac.new(k, v, sha256).digest()
            candidate = int.from_bytes(v, 'big')

            if 1 <= candidate < N:
                return candidate

            k = hmac.new(k, v + b'\x00', sha256).digest()
            v = hmac.new(k, v, sha256).digest()

    def sign(self, z):
        k = self.deterministic_k(z)
        r = (k * G_S256).x.num
        k_inv = pow(k, secp256k1_params.n - 2, secp256k1_params.n)
        s = (z + r * self.secret) * k_inv % secp256k1_params.n

        # It turns out that using a lower value for s will get nodes to relay our transactions.
        if s > secp256k1_params.n / 2:
            s = secp256k1_params.n - s

        return Signature(r, s)

    def wif(self, compressed=True, testnet=False):
        """
        serialize in Wallet Import Format (WIF)
        """
        if testnet:
            prefix = b'\xef'
        else:
            prefix = b'\x80'

        if compressed:
            suffix = b'\x01'
        else:
            suffix = b''

        secret_bytes = self.secret.to_bytes(32, 'big')

        return encode_base58_checksum(prefix + secret_bytes + suffix)
